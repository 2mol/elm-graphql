-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module StarWars.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import StarWars.Object
import StarWars.Interface
import StarWars.Union
import StarWars.Scalar
import StarWars.InputObject
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)



{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphql.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor
{-| Get all known characters.
-}
all : SelectionSet decodesTo StarWars.Object.Character -> Field (List decodesTo) RootQuery
all object_ =
      Object.selectionField "all" [] (object_) (identity >> Decode.list)


type alias CharacterRequiredArguments = { id : StarWars.Scalar.Id }

{-|

  - id - ID of the character.

-}
character : CharacterRequiredArguments -> SelectionSet decodesTo StarWars.Object.Character -> Field (Maybe decodesTo) RootQuery
character requiredArgs object_ =
      Object.selectionField "character" [ Argument.required "id" requiredArgs.id ((\(StarWars.Scalar.Id raw) -> Encode.string raw)) ] (object_) (identity >> Decode.nullable)
