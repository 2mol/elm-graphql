-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Normalize.Interface.Character exposing (Fragments, appearsIn, fragments, friends, id, maybeFragments, name, selection)

import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import Normalize.Enum.Episode_
import Normalize.InputObject
import Normalize.Interface
import Normalize.Object
import Normalize.Scalar
import Normalize.Union


{-| Select fields to build up a SelectionSet for this Interface.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Normalize.Interface.Character
selection constructor =
    Object.selection constructor


type alias Fragments decodesTo =
    { onHuman_ : SelectionSet decodesTo Normalize.Object.Human_
    , onDroid : SelectionSet decodesTo Normalize.Object.Droid
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Normalize.Interface.Character
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "_human" selections.onHuman_
        , Object.buildFragment "Droid" selections.onDroid
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe a)
maybeFragments =
    { onHuman_ = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onDroid = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| Which movies they appear in.
-}
appearsIn : Field (List Normalize.Enum.Episode_.Episode_) Normalize.Interface.Character
appearsIn =
    Object.fieldDecoder "appearsIn" [] (Normalize.Enum.Episode_.decoder |> Decode.list)


{-| The friends of the character, or an empty list if they have none.
-}
friends : SelectionSet decodesTo Normalize.Interface.Character -> Field (List decodesTo) Normalize.Interface.Character
friends object_ =
    Object.selectionField "friends" [] object_ (identity >> Decode.list)


{-| The ID of the character.
-}
id : Field Normalize.Scalar.Id Normalize.Interface.Character
id =
    Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Normalize.Scalar.Id)


{-| The name of the character.
-}
name : Field String Normalize.Interface.Character
name =
    Object.fieldDecoder "name" [] Decode.string
