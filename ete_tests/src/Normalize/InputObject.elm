-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module Normalize.InputObject exposing (..)

import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Normalize.Enum.Language
import Normalize.Interface
import Normalize.Object
import Normalize.Scalar
import Normalize.Union


{-| Type alias for the `CircularOne` attributes. Note that this type
needs to use the `CircularOne` type (not just a plain type alias) because it has either
references itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CircularOneRaw =
    { circularTwo : OptionalArgument CircularTwo }


{-| Type for the CircularOne input object.
-}
type CircularOne
    = CircularOne CircularOneRaw


{-| Encode a CircularOne into a value that can be used as an argument.
-}
encodeCircularOne : CircularOne -> Value
encodeCircularOne (CircularOne input) =
    Encode.maybeObject
        [ ( "circularTwo", encodeCircularTwo |> Encode.optional input.circularTwo ) ]


{-| Type alias for the `CircularTwo` attributes. Note that this type
needs to use the `CircularTwo` type (not just a plain type alias) because it has either
references itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias CircularTwoRaw =
    { circularOne : OptionalArgument CircularOne }


{-| Type for the CircularTwo input object.
-}
type CircularTwo
    = CircularTwo CircularTwoRaw


{-| Encode a CircularTwo into a value that can be used as an argument.
-}
encodeCircularTwo : CircularTwo -> Value
encodeCircularTwo (CircularTwo input) =
    Encode.maybeObject
        [ ( "circularOne", encodeCircularOne |> Encode.optional input.circularOne ) ]


{-| Type for the Greeting input object.
-}
type alias Greeting =
    { language : OptionalArgument Normalize.Enum.Language.Language, name : String, options : OptionalArgument GreetingOptions }


{-| Encode a Greeting into a value that can be used as an argument.
-}
encodeGreeting : Greeting -> Value
encodeGreeting input =
    Encode.maybeObject
        [ ( "language", Encode.enum Normalize.Enum.Language.toString |> Encode.optional input.language ), ( "name", Encode.string input.name |> Just ), ( "options", encodeGreetingOptions |> Encode.optional input.options ) ]


{-| Type for the GreetingOptions input object.
-}
type alias GreetingOptions =
    { prefix : OptionalArgument String }


{-| Encode a GreetingOptions into a value that can be used as an argument.
-}
encodeGreetingOptions : GreetingOptions -> Value
encodeGreetingOptions input =
    Encode.maybeObject
        [ ( "prefix", Encode.string |> Encode.optional input.prefix ) ]


{-| Type alias for the `Recursive` attributes. Note that this type
needs to use the `Recursive` type (not just a plain type alias) because it has either
references itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/graphqelm/issues/33>.
-}
type alias RecursiveRaw =
    { recursive : OptionalArgument Recursive }


{-| Type for the Recursive input object.
-}
type Recursive
    = Recursive RecursiveRaw


{-| Encode a Recursive into a value that can be used as an argument.
-}
encodeRecursive : Recursive -> Value
encodeRecursive (Recursive input) =
    Encode.maybeObject
        [ ( "recursive", encodeRecursive |> Encode.optional input.recursive ) ]
