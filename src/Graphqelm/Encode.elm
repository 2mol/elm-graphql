module Graphqelm.Encode exposing (Value, bool, enum, int, list, object, serialize, string)

{-| `Graphqelm.Encode.Value`s are usually low-level details used by generated code.
Currently the users need to pass Encode Values in for InputObjects arguments, but
otherwise they are only used by the code generated by the `graphqelm` CLI tool.

@docs Value, bool, enum, int, list, string, object


## Low-Level

@docs serialize

-}

import Json.Encode


{-| Values
-}
type Value
    = EnumValue String
    | Json Json.Encode.Value
    | List (List Value)
    | Object (List ( String, Value ))


{-| Encode a list of key-value pairs into an object
-}
object : List ( String, Value ) -> Value
object value =
    Object value


{-| Encode an int
-}
int : Int -> Value
int value =
    Json.Encode.int value
        |> Json


{-| Encode a bool
-}
bool : Bool -> Value
bool bool =
    Json.Encode.bool bool
        |> Json


{-| Encode a string
-}
string : String -> Value
string string =
    Json.Encode.string string
        |> Json


{-| Encode an enum. The first argument is the toString function for that enum.
-}
enum : (a -> String) -> a -> Value
enum enumToString enum =
    EnumValue (enumToString enum)


{-| Encode a list of Values
-}
list : (a -> Value) -> List a -> Value
list toValue list =
    list
        |> List.map toValue
        |> List


{-| Low-level function for serializing a `Graphqelm.Encode.Value`s.
-}
serialize : Value -> String
serialize value =
    case value of
        EnumValue value ->
            value

        Json json ->
            Json.Encode.encode 0 json

        List values ->
            "["
                ++ (List.map serialize values |> String.join ", ")
                ++ "]"

        Object keyValuePairs ->
            "{"
                ++ (List.map (\( key, value ) -> key ++ ": " ++ serialize value)
                        keyValuePairs
                        |> String.join ", "
                   )
                ++ "}"
